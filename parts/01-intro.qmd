# Introduction

## Objectif

L'objectif de ce tutoriel est d'amener, pas à pas, à la conception
voire à la mise à disposition d'un tableau de bord (_dashboard_)
du trafic aérien avec {{< fa brands r-project >}} ou {{< fa brands python >}}.
Ce tutoriel est également l'occasion d'apprendre quelques bonnes pratiques pour les projets {{< fa brands r-project >}} et {{< fa brands python >}}.
Une démonstration de cette application est disponible sur

* <https://rplane-dashboard.kub.sspcloud.fr/> ({{< fa brands r-project >}}) ;
* <https://pylot-dashboard.kub.sspcloud.fr/> ({{< fa brands python >}}). 

L'objectif est de construire
progressivement cette application en suivant les étapes logiques du déroulement d'un
projet de développement d'application interactive : découverte et exploration des données, création de statistiques
descriptives et de visualisations simples sur un jeu de données, 
extension du nombre de visualisations accessibles par la création d'une application. 

L'objectif secondaire de ce tutoriel est de faire découvrir quelques
bonnes pratiques de programmation avec {{< fa brands r-project >}} ou {{< fa brands python >}}
afin de rendre les projets plus
fiables, évolutifs et lisibles. Comme vous pourrez le faire au cours de celui-ci, la différence entre
ces deux langages est assez minime. L'un des objectifs de ce tutoriel est de vous amener à structurer votre projet selon la norme suivante:

::: {#fig-environment layout-ncol=2}

![_Environnement mal structuré_](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment_messy.png){#fig-messy}

![Environnement bien structuré](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment.png){#fig-clean}

L'environnement vers lequel on désire converger
:::


Les exercices de conception pas à pas de l'application s'adressent aussi bien à des
débutants qu'à des utilisateurs plus avancés. La mise à disposition, c'est-à-dire
la mise en production de cette application, fait toutefois appel à des concepts
et outils plus avancés et est donc moins accessible à des débutants.


::: {.callout-note}
Afin de se concentrer sur la démarche, cette application interactive
présentera un nombre limité de fonctionnalités. 

Si vous disposez de temps supplémentaire, n'hésitez pas à ajouter des fonctionnalités à celle-ci et à les proposer pour un ajout dans la galerie du site web du funathon ([inseefrlab.github.io/funathon2024/](https://inseefrlab.github.io/funathon2024/)).
:::


## Pourquoi développer une application interactive ?

Cette question peut apparaître naïve. Pourtant, elle mérite d'être posée 
car elle permet de réfléchir:

* __à l'objectif de l'application__ ;
* __à son public cible__.

Cette réflexion devrait être menée systématiquement car
elle guide les choix techniques ultérieurs et la répartition des tâches entre
les différents profils pouvant intervenir dans la vie du projet s'il est mis en
production (statisticien ou _data scientist_, équipes informatiques...). 

### Une valorisation de données attractive

En général, on fait de la visualisation de données car les sources de données
exploitées présentent tellement de dimensions pouvant intéresser un utilisateur
qu'il est plus pertinent de le laisser explorer les données que de définir
pour lui les statistiques à mettre en avant. L'interactivité permise par les sites
web est particulièrement adaptée pour cela : le fait d'afficher ou masquer
des visualisations en fonction de choix de l'utilisateur
évite de noyer l'information par rapport à des supports figés.

Les _frameworks_ `Shiny` ({{< fa brands r-project >}}),
`Streamlit` ou `Dash` ({{< fa brands python >}}) permettent de rapidement
mettre en oeuvre ce type de site web. Pour une phase de construction
d'un prototype, c'est un choix technique intéressant qui peut provoquer l'effet
_wahou_ attendu pour lancer le projet à plus grande échelle. En effet, ces solutions
techniques permettent, avec les outils bien connus des praticiens de la donnée ({{< fa brands r-project >}} ou {{< fa brands python >}}) de créer rapidement un site web fonctionnel, ergonomique et effectuant des opérations en fonction d'actions de l'utilisateur
sur la page web. Tout ceci sans avoir à maîtriser des notions complexes de
développement web. 

### Une mise à disposition parfois complexe

Néanmoins, passée cette phase d'expérimentation,
le partage
de ces applications, au-delà d'un partage d'écran pour des démonstrations,
n'est pas toujours évident (d'où le fait, nous y reviendrons, que la dernière partie de ce tutoriel s'adresse plutôt à un niveau expert. C'est parce que la connaissance de ces notions complexes qui permettent le bon fonctionnement d'un site web et dont la maîtrise n'est pas nécessaire lorsqu'on se lance dans la construction du site deviennent utiles passée la phase d'expérimentation. 
Celles-ci dépassent néanmoins le champ de compétence
des statisticiens ou _data scientists_. 

Autrement dit, si le projet a l'ambition d'être partagé
à une audience large qui n'a pas les compétences techniques pour faire tourner elle-même
le code, il convient de prendre en compte le fait qu'il faudra dans l'équipe projet
des compétences de développement web. Si le projet est expérimental, c'est moins un problème : `Shiny`, `Dash` ou `Streamlit` permettront d'avoir rapidement un prototype viable. 

Il existe heureusement des solutions techniques plus simples à mettre en oeuvre que `Shiny`,
`Streamlit` ou `Dash`. Les __sites web statiques__ font partie de cet
éventail des possibles et représentent souvent une alternative pertinente aux applications interactives à condition qu'ils soient bien pensés. 
Ils sont notamment pertinents pour les applications de visualisation
de données où cette dernière est déjà préparée en amont. Avoir un serveur `R` ou `Python`
se justifie en effet si des étapes complexes de structuration de données interviennent. Néanmoins, si celles-ci ne sont pas nécessaires, un
simple enrobage avec un constructeur de site comme `Quarto` peut suffire, à condition
que
les productions graphiques ne soient pas trop complexes à créer. Pour des sites faisant intervenir des interactions complexes entre actions d'un utilisateur (bouton, menu déroulant, etc. ) et
affichage, il faudra recourir à du  `Javascript` (technologie utilisée par les sites spécialisés dans la _dataviz_), ce qui fait, à nouveau, appel à des compétences qui dépassent celles des _data scientists_ ou statisticiens classiques. 

En résumé, les éléments ci-dessus ont vocation à servir de mise en garde. `Shiny`, `Dash` ou `Streamlit` sont d'excellents outils techniques lorsqu'ils sont utilisés à bon escient. Néanmoins, leur simplicité d'usage ne doit pas amener à oublier de se poser des questions cruciales comme celui du cycle de vie du projet, du public cible ou encore de la compétence des équipes amenées à le maintenir s'il perdure au-delà d'une phase d'expérimentation.

::: {.callout-warning collapse="true"}
## Site statique vs application réactive

La distinction principale entre ces deux approches est qu'elles
s'appuient sur des serveurs différents. Un site statique repose
sur un serveur web là où `Shiny`/`Streamlit` s'appuient sur 
des serveurs classiques en _backend_. La différence principale
entre ces deux types de serveurs
réside principalement dans leur fonction et leur utilisation :

- Un __serveur web__ est spécifiquement conçu pour stocker, traiter et livrer des pages web aux clients. Cela inclut des fichiers HTML, CSS, JavaScript, images, etc. Les serveurs web écoutent les requêtes HTTP/HTTPS provenant des navigateurs des utilisateurs et y répondent en envoyant les données demandées.
- Un **serveur _backend_** classique est conçu pour effectuer des opérations en réponse à un _front_, en l'occurrence une page web. 
Dans le contexte d'une application `Streamlit` (resp. `Shiny`), il s'agit d'un serveur avec l'environnement `Python` (resp. `R`) _ad hoc_ pour
exécuter le code nécessaire à répondre à toute action d'un utilisateur de l'application. 

:::



