::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 2: d√©couvrir les diff√©rentes sources

Cet exercice est, en apparence, un peu long. N√©anmoins la premi√®re partie
de celui-ci permet la construction d'une fonction g√©n√©rique d'import
des donn√©es qui permet ensuite de gagner
du temps et d'√©viter la redondance de code. 

#### Donn√©es a√©roports {.unnumbered}

* Les donn√©es sont des CSV europ√©ens (avec le s√©parateur `;`). Il est donc conseill√© d'utiliser la fonction `read_csv2` du package `readr` pour lire les donn√©es √† partir 
de la liste de fichiers `unlist(urls$airports)`[^utilitr-csv] si vous utilisez {{< fa brands r-project >}}, et d'utiliser la fonction `read_csv` du package `pandas` pour lire les donn√©es √† partir de la liste de fichiers `urls['airports']` si vous utilisez {{< fa brands python >}}.
* Il est recommand√© de ne pas laisser les types par d√©faut des colonnes mais de figer ceux-ci avec l'argument suivant:

::::: {.panel-tabset group="language"}


## {{< fa brands r-project >}}

```{.r}
col_types = cols(
  ANMOIS = col_character(),
  APT = col_character(),
  APT_NOM = col_character(),
  APT_ZON = col_character(),
  .default = col_double()
)
```

## {{< fa brands python >}}

```{.python}
dtype = {
    "ANMOIS": "str",  
    "APT": "str",     
    "APT_NOM": "str", 
    "APT_ZON": "str",
}
```

:::::

* A partir de la variable `ANMOIS`, cr√©er les variables `an` et `mois`. Penser √† enlever les 0 des mois de janvier √† septembre.

<details>
<summary>
Aide si vous √™tes bloqu√© sur cette question
</summary>


::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}


Pour extraire des √©l√©ments d'une chaine de caract√®re √† partir de la position, il est recommand√© d'utiliser la fonction `str_sub` du package `stringr`. Pour cr√©er de nouvelles colonnes, il est recommand√© d'utiliser la fonction `mutate` du package dplyr. 

::: {.callout-warning}
## Conseil pour se faciliter la vie ult√©rieurement

Il est recommand√© d'utiliser `str_remove` pour retirer les z√©ros en d√©but de mois
qui pourront nous cr√©er des difficult√©s ult√©rieurement
:::

Si vous √™tes toujours bloqu√©, la solution est donn√©e plus bas üëá


## {{< fa brands python >}}

Vous pouvez utiliser les m√©thodes de donn√©es textuelles `str.sub` et `str.replace` de `Pandas`

:::::

</details>



* Cr√©er une fonction `clean_dataframe` qui reprend le code de cr√©ation des variables `an` et `mois`, ajoute une √©tape de passage des noms de colonne en minuscule et renvoie le dataframe en sortie

<details>
<summary>
Solution
</summary>

::::: {.panel-tabset group="language"}


## {{< fa brands r-project >}}


```{.r include="correction/R/clean_dataframe.R"}
```


## {{< fa brands python >}}

```{.python include="src/clean_dataframe.py"}
```


:::::

</details>


* Cr√©er une fonction `import_airport_data` qui prend en _input_ `list_files`
et int√®gre les deux √©tapes pr√©c√©dentes: la lecture des donn√©es, le nettoyage
avec `clean_dataframe`. Cette fonction doit renvoyer une liste de dataframes.

<details>
<summary>
Solution
</summary>

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

```{.r include="correction/R/import_data.R" start-line=1 end-line=17}
```


* Reporter cette fonction dans un fichier `R/clean_dataframe.R` et faire

```{.r}
source("R/clean_dataframe.R")
```

## {{< fa brands python >}}

```{.python include="src/import_data.py" start-line=1 end-line=12}
```

* Reporter cette fonction dans un fichier `src/clean_dataframe.py` et faire


```{.python}
from src.clean_dataframe import clean_dataframe
```

:::::



</details>

#### Donn√©es compagnies {.unnumbered}

Sur le m√™me principe, cr√©er une fonction `import_compagnies_data` qui effectue
la m√™me suite d'op√©rations. Faire n√©anmoins attention aux types des colonnes. 

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Recommandation de param√®tre pour read_csv2 pour l'import de ces fichiers"
col_types = cols(
  ANMOIS = col_character(),
  CIE = col_character(),
  CIE_NOM = col_character(),
  CIE_NAT = col_character(),
  CIE_PAYS = col_character(),
  .default = col_double()
)
```


<details>
<summary>
Solution
</summary>

```{.r include="correction/R/import_data.R" start-line=20 end-line=38}
```

</details>


## {{< fa brands python >}}

Recommandation de param√®tre pour read_csv pour l'import de ces fichiers

```{.python}
col_types = {
  ANMOIS = "str",
  CIE = "str",
  CIE_NOM = "str",
  CIE_NAT = "str",
  CIE_PAYS = "str"
}
```


<details>
<summary>
Solution
</summary>

```{.r include="src/import_data.py" start-line=26 end-line=46}
```

</details>


:::::

#### Donn√©es liaisons  {.unnumbered}

Sur le m√™me principe, cr√©er une fonction `import_liaisons_data` qui effectue
la m√™me suite d'op√©rations. Faire n√©anmoins attention aux types des colonnes. 

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Recommandation de param√®tre pour read_csv pour l'import de ces fichiers"
col_types = cols(
  ANMOIS = col_character(),
  LSN = col_character(),
  LSN_DEP_NOM = col_character(),
  LSN_ARR_NOM = col_character(),
  LSN_SCT = col_character(),
  LSN_FSC = col_character(),
  .default = col_double()
)
```

<details>
<summary>
Solution
</summary>

```{.r include="correction/R/import_data.R" start-line=41 end-line=60}
```

</details>

## {{< fa brands python >}}

Conseil pour les colonnes:

```{.python}
col_types = {
  "ANMOIS": "str",
  "LSN": "str",
  "LSN_DEP_NOM": "str",
  "LSN_ARR_NOM": "str",
  "LSN_SCT": "str",
  "LSN_FSC": "str"
}
```

<details>
<summary>
Solution
</summary>

```{.python include="src/import_data.py" start-line=49 end-line=70}
```

</details>

:::::

#### Localisations des a√©roports {.unnumbered}

Il s'agit d'un jeu de donn√©es spatial. Pour en savoir plus sur ce type de donn√©es,
il est recommand√© de consulter :

- Pour les utilisateurs de {{< fa brands r-project >}}: la [fiche `utilitR`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_donnees_spatiales.html) sur
le sujet ou [ce cours introductif](https://rgeo.linogaliana.fr/exercises/geospatial-wrangling.html).
- Pour les utilisateurs de {{< fa brands python >}}: ce chapitre du [cours de `Python` de l'ENSAE](https://pythonds.linogaliana.fr/content/manipulation/04a_webscraping_TP.html).

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

1. Utiliser la fonction `st_read` du package `sf` pour lire ces donn√©es (dont la localisation est stock√©e dans la variable `urls$geojson$airport`). Stocker l'objet obtenu sous le nom `airports_location`

## {{< fa brands python >}}

1. Utiliser la fonction `read_file` du package `geopandas` pour lire ces donn√©es (dont la localisation est stock√©e dans la variable `urls['geojson']['airport']`). Stocker l'objet obtenu sous le nom `airports_location`


:::::

2. V√©rifier que les donn√©es sont bien dans le syst√®me de repr√©sentation `WGS 84`[^crs]

<details>
<summary>
Aide
</summary>
La fonction √† utiliser est `sf_crs` {{< fa brands r-project >}} ou l'attribut `crs` pour {{< fa brands python >}} 
</details>

3. Il est toujours utile de v√©rifier que nos donn√©es sont bien localis√©es o√π on les attend. Pour cela, il est pertinent de faire une carte avec un fond de carte contextuel, m√™me si celle-ci n'est pas tr√®s soign√©e. Pour faire ceci, le plus simple est d'utiliser la [fonction `addMarkers`](https://rstudio.github.io/leaflet/articles/markers.html) du package `leaflet`.
Essayez de faire cette carte vous-m√™mes ou consultez l'aide ci-dessous

<details>
<summary>
Code pour faire une carte `leaflet` minimale
</summary>
```{.r}
# En R
leaflet(airports_location) %>%
  addTiles() %>%
  addMarkers(popup = ~Nom)
```

```{.python}
# En Python
import folium 
m = folium.Map()

folium.GeoJson(airports_location).add_to(m)
```

</details>

Reporter toutes ces fonctions dans un fichier `R/import_data.R` ({{< fa brands r-project >}}) ou `Python` ({{< fa brands python >}})
:::

[^utilitr-csv]: Si vous √™tes peu familier avec ce type de fichiers, vous pouvez consulter la [fiche `utilitR`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_import_fichiers_plats.html) sur le sujet ({{< fa brands r-project >}}) 
[^crs]: Si vous √™tes peu familier avec les donn√©es g√©ographiques, vous pouvez retenir l'id√©e qu'il s'agit de donn√©es traditionnelles auxquelles s'ajoute une dimension spatiale. Cette derni√®re vise √† localiser les donn√©es sur la terre. La localisation se fait dans un espace √† deux dimensions (espace cart√©sien) alors que notre plan√®te est une sph√®re en trois dimensions. Le principe d'un syst√®me de projection est de faire ce passage en deux dimensions des positions. Le plus connu est le syst√®me GPS, qui est un h√©ritier lointain de la repr√©sentation du monde par [Mercator](https://fr.wikipedia.org/wiki/G%C3%A9rard_Mercator). Ce syst√®me est connu sous le nom de WGS 84 et porte le code EPSG 4326. L'autre syst√®me √† retenir est le Lambert 93 (code EPSG 2154) qui est la projection l√©gale en France (celle-ci, _a contrario_ du Mercator, ne d√©forme pas la France sur une carte). Pour en savoir plus sur les syst√®mes de repr√©sentation, les avantages et inconv√©nients de chacun, il existe de nombreuses ressources en ligne. Des √©l√©ments introductifs, et des d√©monstrations interactives, en lien avec la librairie `Geopandas` de `Python` sont disponibles [ici](https://pythonds.linogaliana.fr/content/manipulation/03_geopandas_intro.html#principe). 


::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

A l'issue de cet exercice, vous devriez avoir le fichier `R/import_data.R` suivant

<details>
<summary>
Le fichier `R/import_data.R` attendu
</summary>

```{.r include="correction/R/import_data.R" filename="R/import_data.R"}
```

</details>

## {{< fa brands python >}}


A l'issue de cet exercice, vous devriez avoir le fichier `src/import_data.py` suivant

<details>
<summary>
Le fichier `src/import_data.py` attendu
</summary>

```{.r include="src/import_data.py" filename="src/import_data.py"}
```

</details>


:::::

La carte `leaflet` que vous devriez avoir obtenue √† la fin de l'exercice
est la suivante:

```{r}
#| echo: false
#| output: false
library(sf)
library(leaflet)
airports_location <- st_read(urls$geojson$airport)
```

```{r}
leaflet(airports_location) %>%
  addTiles() %>%
  addMarkers(popup = ~Nom)
```

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}


A l'issue de l'exercice, 
le code centralis√© dans le script `R/import_data.R`
peut √™tre import√© via le code suivant

```{r}
#| include: false
source("correction/R/import_data.R")  
```

```{r}
#| eval: false
source("R/import_data.R")
```

Vous pouvez initier un script nomm√© `main.R` avec les lignes suivante:

```{.r include="correction/global.R" start-line=24 end-line=34 filename="main.R"}
```

en les faisant pr√©c√©der de l'import des
scripts que nous avons d√©j√† cr√©√© dans le dossier `R`:

```r
source("R/create_data_list.R")
source("R/import_data.R")  
source("R/clean_dataframe.R")
```

Une bonne pratique est de tester son script dans une session vierge. Cela am√®ne
√† construire pas √† pas une chaine plus reproductible. Pour cela, 

- Aller dans les options de {{< fa brands r-project >}} via `Tools > Global Options` et d√©cocher la case `Restore .RData into workspace at setup`
- Red√©marrer votre
session {{< fa brands r-project >}} via le menu `Session > Restart R` ou le
raccourci <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>F10</kbd>
- Ex√©cuter votre fichier `main.R`. Vous devriez rencontrer des erreurs car nous n'avons pas g√©r√© les import de librairies dans ce script puisque notre session actuelle ne b√©n√©ficie plus des import ant√©rieurs.

Une bonne pratique pour comprendre cette exigence de reproductibilit√©
est d'it√©rativement ajouter les librairies utiles √† mesure qu'on rencontre des erreurs (notre code √©tant tr√®s rapide √† tourner, cette logique d'essai-erreur n'est pas tr√®s co√ªteuse). 
Si vous ne d√©sirez pas faire ceci (dommage, c'est un bon exercice), vous
pouvez trouver les imports de packages √† faire pour que notre script soit
reproductible. 

<details>
<summary>
L'environnement minimal de reproductibilit√© pour que le script `main.R` fonctionne
</summary>

```{.r}
library(readr)
library(dplyr)
library(stringr)
library(sf)
``` 

</details>

Ces librairies sont √† √©crire au d√©but de `main.R`. 

## {{< fa brands python >}}

A l'issue de l'exercice, 
le code centralis√© dans le script `src/import_data.py`
peut √™tre import√© via le code suivant

```{.python}
import src.import_data as sid
```

:::::
