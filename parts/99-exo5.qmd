::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 5: carte aérienne du trafic aéroportuaire

1. Créer un _dataframe_ `trafic_date` en ne conservant que les observations
de `pax_apt_all` égales à un certain mois et une certaine année (vous pouvez vous inspirer d'un filtre fait précédemment). 
2. Ajouter ces informations à la table `airports_location` en faisant une jointure sur les variables `Code.OACI` et `apt`, respectivement. Nommer ce _dataframe_ `trafic_aeroports`.
3. A partir de l'[exemple de démarrage de `leaflet`](https://rstudio.github.io/leaflet/articles/markers.html) {{< fa brands r-project >}} ou de l'[exemple canonique `folium`](https://python-visualization.github.io/folium/latest/getting_started.html#Adding-markers) ({{< fa brands python >}}),
créer une carte interactive qui affiche, lorsqu'on clique sur l'un des
marqueurs, le nom de l'aéroport et sa fréquentation. 
4. Créer une variable nommée `volume` qui classe chaque observation dans son [tercile](https://fr.wiktionary.org/wiki/tercile) et transforme la valeur
en couleur à partir de `palette`.  
5. Reproduire une carte similaire à celle présentée plus bas:
    * En {{< fa brands r-project >}}, vous aurez besoin de la [fonction `addAwesomeMarkers`](https://rstudio.github.io/leaflet/articles/markers.html#awesome-icons) et de l'exemple de code ci-dessous:
    ```{.r}
        # Aide pour l'exemple R
        icons <- awesomeIcons(
          icon = 'plane',
          iconColor = 'black',
          library = 'fa',
          markerColor = trafic_aeroports$color
        )
        ```
        
    * En {{< fa brands python >}}, il vous suffit de modifier les paramètres de l'argument `icon`

        

:::: {.callout-warning collapse="true"}
## Subtilité par rapport à l'exemple de [la documentation](https://rstudio.github.io/leaflet/articles/markers.html#awesome-icons) pour {{< fa brands r-project >}}
Par rapport à l'exemple dans [la documentation](https://rstudio.github.io/leaflet/articles/markers.html#awesome-icons),
il faut légèrement modifier le code de sorte à faire `icon=icons[]`
et non `icon = icons`.
::::
:::

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}


```{r}
#| code-fold: true
#| code-summary: "Question 1"
trafic_date <- pax_apt_all %>%
  mutate(
    date = as.Date(paste(anmois, "01", sep=""), format = "%Y%m%d")
  ) %>%
  filter(mois %in% months, an %in% years)
trafic_aeroports <- airports_location %>%
  inner_join(trafic_date, by = c("Code.OACI" = "apt"))
```


```{r}
#| output: false
#| code-fold: true
#| code-summary: "Question 2"
library(leaflet)
  
leaflet(trafic_aeroports) %>% addTiles() %>%
  addMarkers(popup = ~paste0(Nom, ": ", trafic)) 
```

```{r}
#| code-fold: true
#| code-summary: "Question 3"
trafic_aeroports <- trafic_aeroports %>%
  mutate(
    volume = ntile(trafic, 3)
) %>%
  mutate(
    color = palette[volume]
  )
```  


```{r}
#| code-fold: true
#| code-summary: "Question 4"
icons <- awesomeIcons(
  icon = 'plane',
  iconColor = 'black',
  library = 'fa',
  markerColor = trafic_aeroports$color
)


carte_interactive <- leaflet(trafic_aeroports) %>% addTiles() %>%
  addAwesomeMarkers(
  icon=icons[],
  label=~paste0(Nom, "", " (",Code.OACI, ") : ", trafic, " voyageurs")
)
```

## {{< fa brands python >}}

Voir la solution de l'exercice suivant

:::::


```{r}
#| echo: false
carte_interactive
```

Comme précédemment, nous proposons
de transformer la production de cette carte en fonction, cela nous permettra
d'avoir une application légère. Là encore c'est un exercice optionnel mais
intéressant à faire pour découvrir la logique de la programmation fonctionnelle. 

::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 5b (optionnel): une fonction pour notre carte

- Créer une fonction `map_leaflet_airport` avec les arguments `df`, `airports_location`, `month` et `year` produisant la carte. Insérer celle-ci dans le script `R/figures.R` (dans `src/figures.py` pour `Python`).
- Mettre à jour `main.R` ou  `main.py` pour utiliser cette fonction dans votre chaine. N'oubliez pas de
définir `month` et `year` dans votre script. 
:::

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

<details>
<summary>
Code de `R/figures.R` à reprendre
</summary>
```{.r include="correction/R/figures.R" start-line="20" filename="R/figures.R (fin du fichier)"}
```
</details>

<details>
<summary>
Code de `main.R` à reprendre
</summary>
```{.r include="intermediates/exo5.R" filename="main.R"}
```
</details>

## {{< fa brands python >}}


<details>
<summary>
Code de `src/figures.py` à reprendre
</summary>
```{.r include="src/figures.py" start-line="27" filename="src/figures.py (fin du fichier)"}
```
</details>

<details>
<summary>
Code de `main.py` à reprendre
</summary>
```{.r include="intermediates/exo5.py" filename="main.py"}
```
</details>


:::::