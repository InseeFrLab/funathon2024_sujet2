::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4a: préparer les données avant de faire un beau tableau

Nous allons intégrer dans notre application deux tableaux de
statistiques descriptives.

1. Choisir un mois et une année
à partir des objets `YEARS_LIST` et `MONTHS_LIST` pour faire
un filtre sur le _dataframe_ `pax_apt_all`. Une fois
que vous êtes satisfaits, transformer cela en une
fonction `create_data_from_input` prenant en argument un _dataframe_, 
une année et un mois, et renvoyant un _dataframe_.

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="correction/R/divers_functions.R" end-line=6}
```
</details>

## {{< fa brands python >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.python include="correction/src/divers_functions.py" end-line=5}
```
</details>


:::::


2. Pour chaque aéroport (défini par son nom et par son code), calculer le nombre total
de passagers au départ, à l'arrivée, en transit, et total, puis classer les aéroports du plus fréquenté au moins fréquenté (en nombre total de passagers). Stocker le résultat dans l'objet `stats_aeroports`. Une fois que vous êtes satisfaits de
votre chaine d'opération, créer une fonction `summary_stat_airport` qui prend en entrée un _dataframe_ et renvoie un _dataframe_.

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="correction/R/divers_functions.R" start-line=8}
```
</details>

## {{< fa brands python >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.python include="correction/src/divers_functions.py" start-line=9}
```
</details>


:::::


3. Reporter les fonctions créées dans cet exercice dans un script `R/divers_functions.R` ({{< fa brands r-project >}}) ou `src/divers_functions.py` ({{< fa brands python >}}). Dans le cas de Python, ce fichier doit commencer par `import pandas as pd`, car ce package est utilisé dans la fonction.

4. Enrichir le script `main.R` (resp. `main.py`) pour utiliser celles-ci en créant les _dataframes_ adéquats (correction ci-dessous).

:::

Voici une proposition de script `main.R` (resp. `main.py`)  à l'issue de cet exercice

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="intermediates/exo4a.R"}
```
</details>

## {{< fa brands python >}}

<details>
<summary>
Code de l'exercice
</summary>
```{.python include="intermediates/exo4a.py"}
```
</details>

:::::


Nous avons maintenant tous les ingrédients pour faire un tableau de
statistiques descriptives lisibles et esthétiques. Avant
de créer cette table, nous allons créer une colonne supplémentaire:

```{r}
#| echo: false
#| output: false
source("intermediates/exo4a.R")
```

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

```{r}
stats_aeroports_table <- stats_aeroports %>%
  mutate(name_clean = paste0(str_to_sentence(apt_nom), " _(", apt, ")_")
) %>%
select(name_clean, everything())
```

## {{< fa brands python >}}


```{.python}
stats_aeroports['name_clean'] = stats_aeroports['apt_nom'].str.title() + " _(" + stats_aeroports['apt'] + ")_"
stats_aeroports = stats_aeroports[ ['name_clean'] + [ col for col in stats_aeroports.columns if col != 'name_clean' ] ]
```

:::::

Celle-ci nous permettra, une fois mise en forme, d'avoir une colonne
plus esthétique. 

::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4b: un beau tableau (enfin !)

Les différentes questions vont permettre de construire et formatter
progressivement notre tableau. Si vous êtes bloqués, les réponses
sont ci-dessous dans des menus déroulants. 

1. En premier lieu, utiliser `GT` pour faire un tableau basique sur le _dataframe_ `stats_aeroports` (pour les utilisateurs de {{< fa brands python >}}, le faire sur `stats_aeroports.head(15)` car il n'est pas encore possible de limiter la taille de la page).
N'utiliser
aucune option, celles-ci vont être progressivement ajoutées. 
2. Retirer les colonnes `apt` et	`apt_nom` de notre table. 

    <details>
    <summary>Il y a plusieurs
    manières de faire, voici un indice sur la "meilleure"
    </summary>
    
    * En {{< fa brands r-project >}}, il est possible d'utiliser des fonctions de sélection de colonnes
    issues du _tidyverse_ dans `GT`, notamment la fonction `starts_with` (à ne pas
    confondre avec celle de `stringr`)
    * En {{< fa brands python >}}, quand on fournit un _DataFrame_ `Polars`, on peut utiliser les fonctions de sélection qui ressemblent à celles du `tidyverse`. Néanmoins, là nous avons un _DataFrame_ `Pandas`. Il faudra donc utiliser des méthodes `Pandas`, un peu plus verbeuses, du type
    
    ```python
    stats_aeroports.filter(like = "<debut_de_string>").columns.tolist()
    ```
    
    </details>

3. Formatter les colonnes numériques (pour la sélection des colonnes numériques, voir l'indice ci-dessus). 
En consultant la documentation de `gt`, appliquer l'option qui permet de rendre plus concise la notation
des milliers (K) et millions (M). 

4. Utiliser `fmt_markdown` pour appliquer une mise en forme adaptée à la colonne `name_clean`
5. Mettre en forme les noms de colonne (`cols_label`), le titre (`tab_header`), les notes (`tab_source_note`) pour avoir un tableau esthéthique et informatif. Pour les utilisateurs de {{< fa brands r-project >}}, vous pouvez aussi modifier la couleur de la partie supérieure du tableau (`tab_style`).
6. Pour les utilisateurs de {{< fa brands r-project >}}, transformer la table en tableau interactif avec `opt_interactive`[^note-interactive].
:::

[^note-interactive]: Vous perdrez la mise en forme du _header_ du tableau qui n'est pas conciliable avec l'interactivité. 

Les réponses aux différentes questions sont données de manière successives ci-dessous. 
La table finale, obtenue à l'issue de l'exercice est la suivante:

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

```{r}
#| code-fold: true
#| code-summary: "Réponse question 1"
#| output: false
library(gt)
table_aeroports <- gt(stats_aeroports_table)
table_aeroports
```


```{r}
#| code-fold: true
#| code-summary: "Réponse question 2"
#| output: false
table_aeroports <- table_aeroports %>%
  cols_hide(columns = starts_with("apt"))
table_aeroports
```


```{r}
#| code-fold: true
#| code-summary: "Réponse question 3"
#| output: false
table_aeroports <- table_aeroports %>%
  fmt_number(columns = starts_with("pax"), suffixing = TRUE)
table_aeroports
```


```{r}
#| code-fold: true
#| code-summary: "Réponse question 4"
#| output: false
table_aeroports <- table_aeroports %>%
  fmt_markdown(columns = "name_clean")
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 5"
#| output: false
table_aeroports <- table_aeroports %>%
  cols_label(
    name_clean = md("**Aéroport**"),
    paxdep = md("**Départs**"),
    paxarr = md("**Arrivée**"),
    paxtra = md("**Transit**")
  ) %>%
  tab_header(
    title = md("**Statistiques de fréquentation**"),
    subtitle = md("Classement des aéroports")
  ) %>%
  tab_style(
    style = cell_fill(color = "powderblue"),
    locations = cells_title()
  ) %>%
  tab_source_note(source_note = md("_Source: DGAC, à partir des données sur data.gouv.fr_"))
  
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 6"
table_aeroports <- table_aeroports %>%
  opt_interactive()
table_aeroports
```


## {{< fa brands python >}}

<details>
<summary>
Solution suggérée pour l'exercice ci-dessus
</summary>

```{.python}
table_gt = (
  GT(stats_aeroports.head(15))
  .cols_hide(columns = stats_aeroports.filter(like = "apt").columns.tolist())
  .fmt_number(columns = stats_aeroports.filter(like = "pax").columns.tolist(), compact = True)
  .fmt_markdown(columns = "name_clean")
  .cols_label(
    name_clean = md("**Aéroport**"),
    paxdep = md("**Départs**"),
    paxarr = md("**Arrivée**"),
    paxtr = md("**Transit**")
  ) 
  .tab_header(
    title = md("**Statistiques de fréquentation**"),
    subtitle = md("Classement des aéroports")
  )
  .tab_source_note(
    source_note = md("_Source: DGAC, à partir des données sur data.gouv.fr_")
  )
)
```

</details>
:::::
  
Nous proposons de transformer ce code en fonction, cela facilitera l'utilisation
ultérieure de celui-ci dans notre application. 

::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4c (optionnel): transformer en fonction notre chaîne `gt`

Cet exercice est optionnel. Transformer le code ci-dessus en fonction qui sera enregistrée dans `R/tables.R` ({{< fa brands r-project >}}) ou `src/tables.py` ({{< fa brands python >}}). 
Mettre à jour `main.R` ou `main.py` pour utiliser ceci dans votre application.
:::

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

<details>
<summary>
Code de `R/tables.R`
</summary>
```{.r include="correction/R/tables.R" filename="R/tables.R"}
```
</details>

<details>
<summary>
Code de `main.R`
</summary>
```{.r include="intermediates/exo4c.R" filename="main.R"}
```
</details>

## {{< fa brands python >}}

<details>
<summary>
Code de `src/tables.py`
</summary>
```{.python include="correction/src/tables.py" filename="stc/tables.py"}
```
</details>


<details>
<summary>
Code de `main.py`
</summary>
```{.python include="intermediates/exo4c.py" filename="main.py"}
```
</details>

:::::