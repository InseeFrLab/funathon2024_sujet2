::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4a: préparer les données avant de faire un beau tableau

Nous allons intégrer dans notre application deux tableaux de
statistiques descriptives.

1. Choisir un mois et une année
à partir des objets `YEARS_LIST` et `MONTHS_LIST` pour faire
un filtre sur le _dataframe_ `pax_apt_all`. Une fois
que vous êtes satisfaits, transformer cela en
fonction `create_data_from_input` prenant en argument un _dataframe_, 
une année et un mois

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="R/divers_functions.R" start-line=1 end-line=6}
```
</details>


2. Pour chaque aéroport, calculer le nombre total
de passager. Puis classer les aérports du plus fréquenté
au moins fréquenté. Une fois que vous êtes satisfaits de
votre chaine d'opération, créer une fonction `summary_stat_airport`.

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="R/divers_functions.R" start-line=8 end-line=19}
```
</details>

3. Voici une fonction pour faire le même type d'opération sur la base des
liaisons agrégées par grandes zones (métropole, outre-mer, international, etc.). 

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="R/divers_functions.R" start-line=20}
```
</details>

Reporter les fonctions créées dans cet exercice dans un script `divers_functions.R`.
Enrichir le script `main.R` pour utiliser celles-ci en créant les _dataframes_
adéquats (correction ci-dessous)

:::

Voici une proposition de script `main.R` à l'issue de cet exercice

<details>
<summary>
Code de l'exercice
</summary>
```{.r include="intermediates/exo4a.R"}
```
</details>

Nous avons maintenant tous les ingrédients pour faire un tableau de
statistiques descriptives lisibles et esthétiques. Pour cela, nous allons
utiliser le _package_ [`GT`](https://gt.rstudio.com/). Avant
de créer cette table, nous allons créer une colonne supplémentaire:

```{r}
#| echo: false
#| output: false
source("intermediates/exo4a.R")
```

```{r}
stats_aeroports_table <- stats_aeroports %>%
  mutate(name_clean = paste0(str_to_sentence(apt_nom), " _(", apt, ")_")
) %>%
select(name_clean, everything())
```

Celle-ci nous permettra, une fois mise en forme, d'avoir une colonne
plus esthétique. 

::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4b: un beau tableau (enfin !)

Les différentes questions vont permettre de construire et formatter
progressivement notre tableau. Si vous êtes bloqués, les réponses
sont ci-dessous dans des menus déroulants. 

1. En premier lieu, utiliser `GT` pour faire un tableau basique sur le _dataframe_ `stats_aeroports_table`.
N'utiliser
aucune option, celles-ci vont être progressivement ajoutées. 
2. Retirer les colonnes `apt` et	`apt_nom` de notre table. 

<details>
<summary>Il y a plusieurs
manières de faire, voici un indice sur la "meilleure"
</summary>
Il est possible d'utiliser des fonctions de sélection de colonnes
issues du _tidyverse_ dans `gt`, notamment la fonction `starts_with` (à ne pas
confondre avec celle de `stringr`)
</details>

3. Formatter les colonnes numériques (pour la sélection des colonnes numériques, voir l'indice ci-dessus). 
En consultant la documentation de `gt`, appliquer l'option qui permet de rendre plus concise la notation
des milliers (K) et millions (M). 

4. Utiliser `fmt_markdown` pour appliquer une mise en forme adaptée à la colonne `name_clean`
5. Mettre en forme les noms de colonne (`cols_labels`), le titre (`tab_header`) et la couleur de la partie supérieure du tableau (`tab_style`), les notes (`tab_source_note`) pour avoir un tableau esthéthique et informatif
6. Transformer la table en tableau interactif avec `opt_interactive`[^note-interactive]
:::

[^note-interactive]: Vous perdrez la mise en forme du _header_ du tableau qui n'est pas conciliable avec l'interactivité. 

Les réponses aux différentes questions sont données de manière successives ci-dessous.
La table finale, obtenue à l'issue de l'exercice est la suivante:

```{r}
#| code-fold: true
#| code-summary: "Réponse question 1"
#| output: false
library(gt)
table_aeroports <- gt(stats_aeroports_table)
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 2"
#| output: false
table_aeroports <- table_aeroports %>%
  cols_hide(columns = starts_with("apt"))
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 3"
#| output: false
table_aeroports <- table_aeroports %>%
  fmt_number(columns = starts_with("pax"), suffixing = TRUE)
table_aeroports
```


```{r}
#| code-fold: true
#| code-summary: "Réponse question 4"
#| output: false
table_aeroports <- table_aeroports %>%
  fmt_markdown(columns = "name_clean")
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 5"
#| output: false
table_aeroports <- table_aeroports %>%
  cols_label(
    name_clean = md("**Aéroport**"),
    paxdep = md("**Départs**"),
    paxarr = md("**Arrivée**"),
    paxtra = md("**Transit**")
  ) %>%
  tab_header(
    title = md("**Statistiques de fréquentation**"),
    subtitle = md("Classement des aéroports")
  ) %>%
  tab_style(
    style = cell_fill(color = "powderblue"),
    locations = cells_title()
  ) %>%
  tab_source_note(source_note = md("_Source: DGAC, à partir des données sur data.gouv.fr_"))
  
table_aeroports
```

```{r}
#| code-fold: true
#| code-summary: "Réponse question 6"
table_aeroports <- table_aeroports %>%
  opt_interactive()
table_aeroports
```

  
Nous proposons de transformer ce code en fonction, cela facilitera l'utilisation
ultérieure de celui-ci dans notre application. 

::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4c (optionnel): transformer en fonction notre chaîne `gt`

Cet exercice est optionnel. Transformer le code ci-dessus en fonction qui sera enregistrée dans `R/tables.R`. 
Mettre à jour `main.R` pour utiliser ceci dans votre application.
:::

<details>
<summary>
Code de `R/tables.R`
</summary>
```{.r include="R/tables.R" filename="R/tables.R"}
```
</details>

<details>
<summary>
Code de `main.R`
</summary>
```{.r include="intermediates/exo4c.R" filename="main.R"}
```
</details>
