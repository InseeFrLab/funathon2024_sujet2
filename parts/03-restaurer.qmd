### Principe

Pour progresser dans ce tutoriel, un certain nombre de _packages_
doivent √™tre install√©s. Sans eux, m√™me avec le code de l'application, vous
ne serez pas en mesure de reproduire celle-ci. 

Les bonnes pratiques pour la gestion de 
l'environnement sont assez proches en {{< fa brands r-project >}} et {{< fa brands python >}}.
Le principal g√©n√©ral est qu'il existe des outils qui permettent √† un utilisateur de lister l'ensemble des packages dans son environnement avec leur version. Gr√¢ce √† cette liste, d'autres personnes pourront reproduire l'application si elles disposent des m√™mes _inputs_ (le code, les donn√©es...). 

En effet, il est important de voir l'application comme le r√©sultat de la combinaison de plusieurs ingr√©dients. Dans notre cas, nous en avons trois:

* Du code {{< fa brands r-project >}} ou {{< fa brands python >}} : celui-ci a √©t√© r√©cup√©r√© gr√¢ce √† `Git` lors du lancement du projet;
* Des √©l√©ments de configuration:
    + le fichier `renv.lock` ({{< fa brands r-project >}}) ou `requirements.txt` ({{< fa brands python >}}) qui permettra de reconstruire notre environnement √† l'identique gr√¢ce √† des outils adapt√©s[^generation];
    + le fichier `sources.yaml` qui liste l'emplacement des sources sur le site [data.gouv](https://www.data.gouv.fr/fr/).
* Des donn√©es : nous √©voquerons celles-ci lors de la prochaine partie.


![Illustration du principe de s√©paration du code, des donn√©es et de la configuration](./img/environment.png)

De mani√®re g√©n√©rale, c'est une bonne pratique de structurer son projet comme une
combinaison de ces facteurs. Cela vous am√®nera √† faire des projets plus reproductibles
mais aussi √† la structure plus lisible. 

Pour les utilisateurs de `R`, la [formation de l'Insee aux bonnes pratiques](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/)
consacre une partie aux environnements reproductibles avec `renv`. Pour les utilisateurs
de `Python`, le [cours de mise en production de projets _data science_](https://ensae-reproductibilite.github.io/website/chapters/portability.html)
consacre un chapitre au sujet. 

[^generation]: Ces fichiers ne sont pas g√©n√©r√©s manuellement. Ce sont des outils adapt√©s (`renv` pour `R`, `pip` pour `Python`) qui font ce travail de versionnage de l'environnement. 

### Cr√©er l'environnement

Si vous avez d√©j√† tent√© de partager un code qui fonctionnait chez vous,
il est presque certain que la personne ayant voulu le r√©utiliser a rencontr√©
une erreur si elle a tent√© de le faire tourner. C'est tout √† fait normal car
vous avez distribu√© votre code, √©ventuellement vos donn√©es, mais pas le troisi√®me
pilier de l'image pr√©c√©dente, √† savoir la configuration de l'environnement dans lequel votre code fonctionnait. La solution la plus fiable, mais peu pratique, serait de donner votre ordinateur √† la personne qui tente de r√©utiliser votre code. En livrant votre ordinateur, vous fournissez votre environnement de travail mais √©galement beaucoup d'√©l√©ments suppl√©mentaires qui ne sont pas indispensables √† l'application.

Une solution plus simple est de fournir les sp√©cifications qui ont permis √† votre
code de fonctionner. Dans un monde id√©al, il s'agit de fournir la liste
des _packages_ et leur version. Si la personne √† qui vous partagez votre code et vos donn√©es a cette m√™me liste de versions de _packages_, et pas de _packages_ suppl√©mentaires venant polluer l'environnement, les chances d'avoir la m√™me application que vous sont tr√®s √©lev√©es. 

Les solutions techniques pour restaurer un environnement {{< fa brands r-project >}} et {{< fa brands python >}} sont l√©g√®rement diff√©rentes et sont d√©crites ci-dessous. 

::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

`renv` est un gestionnaire de _packages_ qui permet de faire ces deux op√©rations :

1. Enregistrer la liste de _packages_ apr√®s avoir fait tourner un code
2. Restaurer l'environnement √† partir de cette liste

En l'occurrence, pour vous, l'important est le second point: pouvoir recr√©er l'environnement n√©cessaire
au bon fonctionnement de l'application. Ceci est tr√®s simple gr√¢ce √† la commande

```{.r filename="A lancer dans la console R"}
renv::restore()
```

Cette commande doit √™tre lanc√©e depuis la console `R` ouverte dans le projet qui
a √©t√© r√©cup√©r√©[^renv-script]. L'environnement cr√©√© n'est pas fig√©. 
Il est tout √† fait possible, ensuite, d'installer des _packages_ suppl√©mentaires
par le biais de `install.packages`. L'environnement propos√© par notre fichier
`renv.lock` est le minimum
requis pour reproduire l'application mais ce n'est pas un environnement fig√©.
Si vous ajoutez des _packages_ utiles pour votre application, avant la phase de mise en production, n'oubliez pas
de faire `renv::snapshot()` pour mettre √† jour le fichier `renv.lock` (c'est le point 1. √©voqu√© pr√©c√©demment). 

[^renv-script]: Si vous utilisez `renv` dans vos futurs projets, ce que nous vous recommandons, cette commande n'est pas √† inscrire dans vos scripts. Vous pouvez indiquer que cette commande est n√©cessaire dans le `README` de votre projet. 

:::: {.callout-warning collapse="true"}
## Ce que `renv` √©vite

On retrouve parfois sur internet un code similaire √† celui-ci :

```r
# A ne pas reproduire chez vous üò®
if (!requireNamespace("dplyr", quietly = TRUE)) {
  install.packages("dplyr")
}
```

C'est une gestion artisanale de l'environnement qui n'est pas conseill√©e. `renv` sera plus simple et
plus fiable. De mani√®re g√©n√©rale, ce n'est pas une bonne pratique de g√©rer l'installation des _packages_
dans le script. En effet, c'est un √©l√©ment de configuration et, comme nous l'avons dit, celle-ci doit se faire
en dehors du script.  

::::

Maintenant que nous disposons d'un environnement fonctionnel, 
nous pouvons avancer sur la conception du projet. La premi√®re √©tape est d'explorer
les jeux de donn√©es que nous utiliserons dans l'application.

## {{< fa brands python >}}

Pour faire les choses bien, il faudrait repartir d'un environnement vierge et installer toutes les d√©pendances du projet (comme le fait la solution {{< fa brands r-project >}}).

N√©anmoins, si vous √™tes sur le SSPCloud, c'est presque de l'exc√®s de z√®le de faire cela car l'application a √©t√© d√©velopp√© √† partir de l'environnement du SSPCloud duquel elle ne diverge que tr√®s peu. Il suffit donc d'ajouter √† l'environnement existant un nombre restreint de _packages_ qui sont list√©s dans `requirements.txt`.

Dans le terminal, il suffit donc de faire un  `pip install` ad√©quat:

```{.python}
pip install -r requirements.txt
```

:::: {.callout-warning collapse="true"}
## Ce que ce fichier `requirements.txt` √©vite

On retrouve parfois dans des _notebooks_ partag√©s sur internet un code similaire √† celui-ci :

```r
# A ne pas reproduire chez vous üò®
!pip install geopandas
```

voire parfois dans des scripts, ce type de code:

```r
# A ne pas reproduire chez vous üò®
import subprocess
subprocess.run(["pip install geopandas"]) 
```

C'est une gestion artisanale de l'environnement qui n'est pas conseill√©e. De mani√®re g√©n√©rale, ce n'est pas une bonne pratique de g√©rer l'installation des _packages_
dans le script. En effet, c'est un √©l√©ment de configuration et, comme nous l'avons dit, celle-ci doit se faire
en dehors du script.  

::::


:::

