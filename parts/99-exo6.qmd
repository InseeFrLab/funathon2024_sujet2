::: {.callout-note collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 6: Créer la structure de l'application

::::: {.panel-tabset group="language"}

## {{< fa brands r-project >}}

1. Créer le fichier `global.R` à partir de `main.R` en ne conservant que les lignes jusqu'à la création (incluse);
de l'objet `trafic_aeroports`.

<details>
<summary>
Le fichier `global.R` attendu
</summary>
```{.r include="intermediates/exo6/global.R"}
```
</details>

L'objectif de la suite de l'exercice est de comprendre comment fonctionne une
application. Celle-ci sera enrichie ensuite de nos productions graphiques. 

Créer les fichiers `ui.R` et `server.R` à partir des modèles ci-dessous

<details>
<summary>
Code de `ui.R` à reprendre
</summary>
```{.r include="intermediates/exo6/ui.R" filename="ui.R"}
```
</details>

<details>
<summary>
Code de `server.R` à reprendre
</summary>
```{.r include="intermediates/exo6/server.R" filename="server.R"}
```
</details>


Lancer l'application en lançant `shiny::runApp()` depuis la console `R`. Si `firefox` affiche un message de blocage de l'ouverture d'une fenêtre, autoriser celle-ci. 

1. Observer votre console, notamment les messages lors du lancement de l'application
2. Jouer avec les _inputs_ et observer la manière dont l'affichage s'ajuste

Maintenant, se pencher sur le code source et observer l'aller-retour entre les objets du script `ui.R` et `server.R`. 

Tuer l'application avec le bouton stop de la console. 


## {{< fa brands python >}}

1. Renommer le fichier `main.py` en `app.py`
2. Vous devriez avoir besoin des éléments suivants dans l'application, à ajouter en début de script:

```{.python}
import streamlit as st
import streamlit.components.v1 as components
from streamlit_folium import st_folium
```

Globalement, le fichier `app.py` va avoir la structure suivante:

- Import des _packages_ ;
- Import et restructuration des données ;
- Création de la mise en page (_layout_) de l'application ;
- Création des _inputs_ (les sélecteurs) et utilisation pour produire nos valorisations graphiques.

3. Après la dernière ligne de création de base de données, créer le _layout_ de l'application

    ```{.python}
    # Streamlit Layout --------------------------------------
    
    st.set_page_config(
      page_title="Tableau de bord des aéroports français", layout="wide",
      page_icon="✈️"
      )
    col1, col2 = st.columns(2)
    ```

    Pour le moment, nous proposons de ne pas se préoccuper des deux colonnes, nous remettrons en forme ultérieurement notre application.

4. Créer un objet `selected_date` à partir de [`st.date_input`](https://docs.streamlit.io/develop/api-reference/widgets/st.date_input) ayant pour étiquette "Mois choisi" et prenant par défaut la valeur `pd.to_datetime("2019-01-01")`. L'utiliser pour créer des objets `year` et `month`.

5. Utiliser ces objets `year` et `month`, qui sont donc maintenant réactifs et non plus figés, pour créer `stats_aeroports`, puis `table_airports`. Pour que la table rende bien sur l'application, vous pouvez ajouter, par rapport à précédemment, la méthode `as_raw_html` après l'application de la fonction `create_table_airports`. On va supposer que cette table HTML s'appelle `table_airports`.

6. Pour intégrer cette table dans l'application, insérer le code suivant dans `app.py`:

    ```{.python}
    with col1:
        components.html(table_airports, height=600)
    ```

7. Faire tourner l'application avec la commande suivante dans un terminal: 

    ```{.python}
    streamlit run app.py --server.port=5000 --server.address=0.0.0.0
    ```

    La commande suivante devrait s'afficher sur votre terminal:

    ```{.python}
    Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.
    
    
      You can now view your Streamlit app in your browser.
    
      URL: http://0.0.0.0:5000
    ```

    Et `VSCode` devrait vous proposer d'ouvrir cette fenêtre. Ne le faites pas car une redirection plus persistante vers le _localhost_ de votre service (http://0.0.0.0:5000) va être nécessaire. 

8. Retourner sur la page _"Mes services"_ du [SSPCloud](https://datalab.sspcloud.fr/my-services) et cliquer sur le lien du port personnalisé

![](img/lien_perso.png)

Observer la page web et l'évolution de votre console. 

9. Stopper votre application avec <kbd>CTRL</kbd>+<kbd>C</kbd>. Ajouter le code suivant à votre application:

    ```{.python}
    with col2:
        st.subheader("Carte des aéroports")
        carte_interactive = map_leaflet_airport(
            pax_apt_all, airports_location, month, year
        )
        st_folium(carte_interactive, height=300)
        
        # Line Plot Output
        st.subheader("Fréquentation d'un aéroport")
        selected_airport = st.selectbox(
            "Aéroport choisi", options=liste_aeroports, index=0
        )
        figure_plotly = plot_airport_line(pax_apt_all, selected_airport)
        st.plotly_chart(figure_plotly)
    ```

10. Exécuter à nouveau la commande `streamlit run` ci-dessus. Observer l'évolution de votre application et jouez avec les paramètres de celle-ci. Ajouter, à la fin de celle-ci, un `print(year)`. Jouer avec le _widget_ de date dans votre application web et observer la valeur affichée dans l'application et dans votre terminal. Comprenez-vous pourquoi l'année ne s'affiche pas dans la page web mais dans la console ? 

:::::: {.callout-tip}
## Explication

Comme nous l'avons évoqué précédemment, il convient de distinguer l'interface utilisateur du serveur. Les commandes `Python` sont exécutées au niveau du serveur, en l'occurrence votre terminal `Python` dans `VSCode`.  Pour afficher des éléments dans l'interface utilisateur, il faut indiquer à `Streamlit` de les remonter, par exemple par le biais de `st.plotly_chart`. Sinon, elles restent au niveau du serveur. 

En l'occurrence, le `print` est une commande qui permet d'afficher la valeur au niveau de la console Python. Mais on ne dit pas à `Streamlit` d'afficher cette valeur sur la page web (l'interface utilisateur). 

A noter que cette distinction n'est pas propre à `Streamlit`. Dans le monde du développement `JavaScript`, on distingue aussi l'affichage du _widget_ (sa vue) de sa valeur réelle. Pour s'y retrouver lorsqu'ils développent, les développeurs web affichent souvent dans la console `Javascript` la valeur de l'objet par le biais de `console.log`. Vous pouvez d'ailleurs retrouver cette console `JavaScript` dans vos outils de développement de votre navigateur (par exemple sur _Firefox_ par le biais de <kbd>CTRL</kbd>+<kbd>MAJ</kbd>+<kbd>K</kbd>). Si vous voyez des valeurs s'afficher, c'est que les développeurs du site ont utilisé des `console.log` de temps en temps. 

::::::

:::::


:::
